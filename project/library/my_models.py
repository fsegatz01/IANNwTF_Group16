# -*- coding: utf-8 -*-
"""my_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15iU6vESvthOHSyz-xw9WjQcVneSTa32L
"""

import tensorflow as tf
from sklearn.linear_model import LinearRegression
from keras import backend as K
from keras.layers import Conv2D, Dense, MaxPooling2D, Flatten

############## CNN MODEL  #############
  def output_to_input(self, layer_number, data):
      
        self.get_layer_output = K.function([model.layers[0].input],
                                          [model.layers[layer_number].output])
        self.layer_output = self.get_layer_output([data])[0]
        self.hidden_layer_outputs_flat = tf.keras.layers.Flatten()(self.layer_output)

        return self.hidden_layer_outputs_flat

############## ResNet50 MODEL  #############

class ResNet50Model:
    def __init__(self):
        self.model = tf.keras.applications.resnet.ResNet50(
            input_shape=(32,32,3), #.output_shapes()[0],
            include_top=True,
            weights=None,
            classes=100
        )
        self.optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
        self.loss = 'categorical_crossentropy'
        self.metrics = ['categorical_accuracy']


    def output_to_input(self, layer_number, data):
      
        self.get_layer_output = K.function([model.layers[0].input],
                                          [model.layers[layer_number].output])
        self.layer_output = self.get_layer_output([data])[0]
        self.hidden_layer_outputs_flat = tf.keras.layers.Flatten()(self.layer_output)

        return self.hidden_layer_outputs_flat

############## Linear MODEL  #############
class LinearModel:
    def __init__(self):
        self.model = LinearRegression()

    def train(self, x_train, y_train):
        self.model.fit(x_train, y_train)

    def predict(self, x_test):
        return self.model.predict(x_test)